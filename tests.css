/**
 * TemplateStyles/CSS Sanitizer test file
 * This file is used to test the rules that are extended.
 */

/**
 * CSS Custom Properties
 */
.ts-css-custom-properties-declaration {
	--ts-css-var-value: #000;
	--ts-css-var-shorthand: 1px solid var(--ts-css-var-value);
}

.ts-css-custom-properties-value {
	border: var(--ts-css-var-shorthand);
	color: var(--ts-css-var-value);
	background-color: var(--ts-css-var-value, #36c);
}

.ts-css-custom-properties-value-grid {
	grid-template-columns: repeat(2, minmax(0, 1fr)) var(--right-rail-size);
	grid-template-columns: 1fr var(--right-rail-size);
	grid-template-columns: minmax(0, 1fr) var(--right-rail-size);
	grid-template-columns: repeat(var(--column-foo), minmax(0, 1fr));
}

/**
 * CSS Basic User Interface Module Level 4
 */
.ts-css-basic-user-interface-pointer-events {
	/* Keyword values */
	pointer-events: auto;
	pointer-events: none;

	/* Values used in SVGs */
	pointer-events: visiblePainted;
	pointer-events: visibleFill;
	pointer-events: visibleStroke;
	pointer-events: visible;
	pointer-events: painted;
	pointer-events: fill;
	pointer-events: stroke;
	pointer-events: bounding-box;
	pointer-events: all;

	/* Global values */
	pointer-events: inherit;
	pointer-events: initial;
	pointer-events: revert;
	pointer-events: revert-layer;
	pointer-events: unset;
}

/**
 * CSS Box Sizing Module Level 4
 */
.ts-css-box-sizing-4 {
	aspect-ratio: 1 / 1;
	aspect-ratio: 1;
	aspect-ratio: 16 / 9;
	aspect-ratio: 0.5;
	aspect-ratio: auto 3/4;
	aspect-ratio: 3/4 auto;
	contain-intrinsic-width: none;
	contain-intrinsic-width: 10rem;
	contain-intrinsic-width: auto 300px;
	contain-intrinsic-height: none;
	contain-intrinsic-height: 10rem;
	contain-intrinsic-height: auto 300px;
	contain-intrinsic-block-size: none;
	contain-intrinsic-block-size: 10rem;
	contain-intrinsic-block-size: auto 300px;
	contain-intrinsic-inline-size: none;
	contain-intrinsic-inline-size: 10rem;
	contain-intrinsic-inline-size: auto 300px;
	contain-intrinsic-size: none;
	contain-intrinsic-size: 10rem;
	contain-intrinsic-size: auto 300px;
	contain-intrinsic-size: auto none;
	contain-intrinsic-size: none none;
	contain-intrinsic-size: 300px 10rem;
	contain-intrinsic-size: auto 300px auto 4rem;
	min-intrinsic-sizing: legacy;
	min-intrinsic-sizing: zero-if-scroll;
	min-intrinsic-sizing: zero-if-extrinsic;
	min-intrinsic-sizing: zero-if-scroll zero-if-extrinsic;
	min-intrinsic-sizing: zero-if-extrinsic zero-if-scroll;
}

/**
 * CSS Cascading and Inheritance Level 5
 */
.ts-css-cascading-and-inheritance-revert-layer {
	font-size: revert-layer;
}

/**
 * CSS Color Module Level 4
 */
.ts-css-color-4-hex-color {
	background: #f09a;
	background: #ff0099aa;
}

/**
 * CSS Containment Module Level 3
 */
.ts-css-containment-contain {
	contain: none;
	contain: strict;
	contain: content;
	contain: size;
	contain: layout;
	contain: paint;
	contain: style;
	contain: inline-size;
}

.ts-css-containment-content-visibility {
	/* Keyword values */
	content-visibility: visible;
	content-visibility: hidden;
	content-visibility: auto;

	/* Global values */
	content-visibility: inherit;
	content-visibility: initial;
	content-visibility: revert;
	content-visibility: revert-layer;
	content-visibility: unset;
}

/**
 * CSS Filter Effects Module Level 2
 */
.ts-css-filter-effects-backdrop-filter {
	/* Keyword value */
	backdrop-filter: none;

	/* URL to SVG filter */
	backdrop-filter: url(common-filters.svg#filter);

	/* <filter-function> values */
	backdrop-filter: blur(2px);
	backdrop-filter: brightness(60%);
	backdrop-filter: contrast(40%);
	backdrop-filter: drop-shadow(4px 4px 10px blue);
	backdrop-filter: grayscale(30%);
	backdrop-filter: hue-rotate(120deg);
	backdrop-filter: invert(70%);
	backdrop-filter: opacity(20%);
	backdrop-filter: sepia(90%);
	backdrop-filter: saturate(80%);

	/* Multiple filters */
	backdrop-filter: url(filters.svg#filter) blur(4px) saturate(150%);

	/* Global values */
	backdrop-filter: inherit;
	backdrop-filter: initial;
	backdrop-filter: revert;
	backdrop-filter: revert-layer;
	backdrop-filter: unset;
}

/**
 * CSS Fonts Module Level 4
 */
@font-face {
	font-family: 'Arial';
	src: local('Arial');
	ascent-override: 100%;
	descent-override: 100%;
	font-display: swap;
	line-gap-override: 100%;
}

.ts-css-fonts-4-font-variation-settings {
	/* Use the default settings */
	font-variation-settings: normal;

	/* Set values for variable font axis names */
	font-variation-settings: 'xhgt' 0.7;

	/* Global values */
	font-variation-settings: inherit;
	font-variation-settings: initial;
	font-variation-settings: revert;
	font-variation-settings: revert-layer;
	font-variation-settings: unset;
}

.ts-css-fonts-4-font-optical-sizing {
	/* keyword values */
	font-optical-sizing: none;
	font-optical-sizing: auto; /* default */

	/* Global values */
	font-optical-sizing: inherit;
	font-optical-sizing: initial;
	font-optical-sizing: revert;
	font-optical-sizing: revert-layer;
	font-optical-sizing: unset;
}

/**
 * CSS Fonts Module Level 5
 */
@font-face {
	font-family: 'Times New Roman';
	src: local('Times New Roman');
	size-adjust: 100%;
}

/**
 * CSS Images Module Level 4
 */
.ts-css-images-4-image-set {
	/* Select image based on resolution */
	background-image: image-set('image1.jpg' 1x, 'image2.jpg' 2x);

	background-image: image-set(url('image1.jpg') 1x, url('image2.jpg') 2x);

	/* Select gradient based on resolution */
	background-image: image-set(
		linear-gradient(blue, white) 1x,
		linear-gradient(blue, green) 2x
	);

	/* Select image based on supported formats */
	background-image: image-set(
		url('image1.avif') type('image/avif'),
		url('image2.jpg') type('image/jpeg')
	);
}

/**
 * CSS Ruby Annotation Layout Module Level 1
 */
.ts-css-ruby-position {
	/* Keyword values */
	ruby-position: over;
	ruby-position: under;
	ruby-position: alternate;
	ruby-position: alternate over;
	ruby-position: alternate under;
	ruby-position: inter-character;

	/* Global values */
	ruby-position: inherit;
	ruby-position: initial;
	ruby-position: revert;
	ruby-position: revert-layer;
	ruby-position: unset;
}

.ts-css-ruby-align {
	/* Keyword values */
	ruby-align: start;
	ruby-align: center;
	ruby-align: space-between;
	ruby-align: space-around;

	/* Global values */
	ruby-align: inherit;
	ruby-align: initial;
	ruby-align: revert;
	ruby-align: revert-layer;
	ruby-align: unset;
}

/**
 * CSS Scroll Snap Module Level 1
 */
.ts-css-scroll-snap-scroll-margin {
	scroll-margin: 10px;
	scroll-margin: 1em 0.5em 1em 1em;

	/* Global values */
	scroll-margin: inherit;
	scroll-margin: initial;
	scroll-margin: revert;
	scroll-margin: revert-layer;
	scroll-margin: unset;
}

.ts-css-scroll-snap-scroll-margin-block {
	scroll-margin-block: 10px;
	scroll-margin-block: 1em 0.5em;

	/* Global values */
	scroll-margin-block: inherit;
	scroll-margin-block: initial;
	scroll-margin-block: revert;
	scroll-margin-block: revert-layer;
	scroll-margin-block: unset;
}

.ts-css-scroll-snap-scroll-margin-block-end {
	/* <length> values */
	scroll-margin-block-end: 10px;
	scroll-margin-block-end: 1em;

	/* Global values */
	scroll-margin-block-end: inherit;
	scroll-margin-block-end: initial;
	scroll-margin-block-end: revert;
	scroll-margin-block-end: revert-layer;
	scroll-margin-block-end: unset;
}

/* skipping other scroll-margin-* properties for now */

.ts-css-scroll-snap-scroll-padding {
	/* Keyword values */
	scroll-padding: auto;

	/* <length> values */
	scroll-padding: 10px;
	scroll-padding: 1em 0.5em 1em 1em;
	scroll-padding: 10%;

	/* Global values */
	scroll-padding: inherit;
	scroll-padding: initial;
	scroll-padding: revert;
	scroll-padding: revert-layer;
	scroll-padding: unset;
}

.ts-css-scroll-snap-scroll-padding-block {
	/* Keyword values */
	scroll-padding-block: auto;

	/* <length> values */
	scroll-padding-block: 10px;
	scroll-padding-block: 1em 0.5em;
	scroll-padding-block: 10%;

	/* Global values */
	scroll-padding-block: inherit;
	scroll-padding-block: initial;
	scroll-padding-block: revert;
	scroll-padding-block: revert-layer;
	scroll-padding-block: unset;
}

.ts-css-scroll-snap-scroll-padding-block-end {
	/* Keyword values */
	scroll-padding-block-end: auto;

	/* <length> values */
	scroll-padding-block-end: 10px;
	scroll-padding-block-end: 1em;
	scroll-padding-block-end: 10%;

	/* Global values */
	scroll-padding-block-end: inherit;
	scroll-padding-block-end: initial;
	scroll-padding-block-end: revert;
	scroll-padding-block-end: revert-layer;
	scroll-padding-block-end: unset;
}

.ts-css-scroll-snap-scroll-snap-align {
	/* Single keyword value */
	scroll-snap-align: none;
	scroll-snap-align: center;
	scroll-snap-align: start;
	scroll-snap-align: end;

	/* Two keyword values */
	scroll-snap-align: start end;
	scroll-snap-align: end center;
	scroll-snap-align: center start;

	/* Global values */
	scroll-snap-align: inherit;
	scroll-snap-align: initial;
	scroll-snap-align: revert;
	scroll-snap-align: revert-layer;
	scroll-snap-align: unset;
}

.ts-css-scroll-snap-scroll-snap-stop {
	scroll-snap-stop: normal;
	scroll-snap-stop: always;
}

.ts-css-scroll-snap-scroll-snap-type {
	scroll-snap-type: none;
	scroll-snap-type: x;
	scroll-snap-type: y;
	scroll-snap-type: block;
	scroll-snap-type: inline;
	scroll-snap-type: both;
	scroll-snap-type: x mandatory;
	scroll-snap-type: y mandatory;
	scroll-snap-type: both mandatory;
}

/**
 * CSS Values and Units Module Level 4
 */
.ts-css-values-and-units-clamp {
	width: clamp(100px, 100%, 200px);
}

/**
 * Uncategorized
 */
.item {
	left: calc(var(--var1) / var(--var2));
	left: calc(var(--var1) / var(--var2) * 100%);
	right: calc((var(--var1) - var(--var2)) / var(--var3) * 100%);
}

.grid {
	grid: auto-flow dense/repeat(auto-fit, minmax(9.375rem, 1fr));
	grid-auto-rows: minmax(3rem, auto);
	grid-gap: var(--space-xs);
	grid-column: span 2;
	grid-row: span 3;
	grid-row: span 4;
	grid-row: span 8 / auto;
}

.color {
	background-color: rgb(from red r g 200);
	color: rgb(100, 100, 100);
	background-color: hsl(from red h s l / 0.21);

	color: color(from red a98-rgb r g b);
	color: color(from red a98-rgb r g b / 1);

	color: color(from red xyz-d50 x y z);
	color: color(from red xyz-d50 x y z / 1);

	color: hsl(from red h s l);
	color: hsl(from red h s l / 1);

	color: rgb(from red r var(--foo) b);
	color: rgb(from red r g b / 1);

	color: hsl(from green 211 s l / 50%);
	background-color: hsl(from red 180 s calc(l - 0.25));

	background-color: color(
		from var(--base-color) display-p3 r calc(g + 0.15) calc(b + 0.15)
	);

	background-color: hsl(
		from var(--color-primary) h calc(s - 25) calc(l + var(--adjust-hover)) /
			0.66
	);
}
